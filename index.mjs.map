{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport safeCasts from '@stdlib/ndarray-safe-casts';\nimport resolveStr from '@stdlib/ndarray-base-dtype-resolve-str';\n\n\n// VARIABLES //\n\nvar TABLE = safeCasts();\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a provided ndarray data type can be safely cast to another ndarray data type.\n*\n* @param {*} from - ndarray data type\n* @param {*} to - ndarray data type\n* @returns {boolean} boolean indicating if a data type can be safely cast to another data type\n*\n* @example\n* var bool = isSafeCast( 'float32', 'float64' );\n* // returns true\n*\n* bool = isSafeCast( 'float64', 'int32' );\n* // returns false\n*/\nfunction isSafeCast( from, to ) {\n\tvar t;\n\tfrom = resolveStr( from );\n\tto = resolveStr( to );\n\tif ( from === to ) { // note: for \"struct\" data types, require strict equality to be considered a safe cast\n\t\treturn true;\n\t}\n\tt = TABLE[ from ];\n\tif ( t ) {\n\t\treturn t[ to ] > 0;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isSafeCast;\n"],"names":["TABLE","safeCasts","isSafeCast","from","to","t","resolveStr"],"mappings":";;sMA4BA,IAAIA,EAAQC,IAmBZ,SAASC,EAAYC,EAAMC,GAC1B,IAAIC,EAGJ,OAFAF,EAAOG,EAAYH,OACnBC,EAAKE,EAAYF,QAIjBC,EAAIL,EAAOG,KAEHE,EAAGD,GAAO,CAGnB"}